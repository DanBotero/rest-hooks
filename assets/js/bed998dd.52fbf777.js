"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78911],{34692:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/entities-6a366805cb88019f8204eee7e3dba618.png"},70523:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(41395),i=n(58215),s=n(67294);function o({children:e}){return s.createElement(a.Z,{defaultValue:"ts",groupId:"language",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}]},s.createElement(i.Z,{value:"ts"},e[0]),s.createElement(i.Z,{value:"js"},e[1]))}},25406:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>r,contentTitle:()=>l,metadata:()=>d,toc:()=>p,default:()=>c});var a=n(87462),i=(n(27378),n(3905)),s=n(41395),o=n(58215);n(70523);const r={title:"Entity and Data Normalization",sidebar_label:"Entity"},l=void 0,d={unversionedId:"getting-started/entity",id:"getting-started/entity",isDocsHomePage:!1,title:"Entity and Data Normalization",description:"Entities have a primary key. This enables easy access via a lookup table.",source:"@site/../docs/getting-started/entity.md",sourceDirName:"getting-started",slug:"/getting-started/entity",permalink:"/docs/getting-started/entity",editUrl:"https://github.com/coinbase/rest-hooks/edit/master/docs/getting-started/entity.md",tags:[],version:"current",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1631647374,formattedLastUpdatedAt:"9/14/2021",frontMatter:{title:"Entity and Data Normalization",sidebar_label:"Entity"},sidebar:"docs",previous:{title:"Data Dependencies",permalink:"/docs/getting-started/data-dependency"},next:{title:"Expiry Policy",permalink:"/docs/getting-started/expiry-policy"}},p=[{value:"Mutations and Dynamic Data",id:"mutations-and-dynamic-data",children:[],level:2},{value:"Schema",id:"schema",children:[{value:"Nesting",id:"nesting",children:[],level:3},{value:"Data Representations",id:"data-representations",children:[],level:3}],level:2}],m={toc:p};function c({components:e,...t}){return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/api/Entity"},"Entities")," have a primary key. This enables easy access via a lookup table.\nThis makes it easy to find, update, create, or delete the same data - no matter what\nendpoint it was used in."),(0,i.kt)(s.Z,{defaultValue:"State",values:[{label:"State",value:"State"},{label:"Response",value:"Response"},{label:"Endpoint",value:"Endpoint"},{label:"Entity",value:"Entity"},{label:"React",value:"React"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"State",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Entities cache",src:n(34692).Z}))),(0,i.kt)(o.Z,{value:"Response",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "id": 1, "title": "this is an entity" },\n  { "id": 2, "title": "this is the second entity" }\n]\n'))),(0,i.kt)(o.Z,{value:"Endpoint",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const PresentationList = new Endpoint(\n  () => fetch(`/presentations`).then(res => res.json()),\n  { schema: [PresentationEntity] },\n);\n"))),(0,i.kt)(o.Z,{value:"Entity",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"class PresentationEntity extends Entity {\n  readonly id: string = '';\n  readonly title: string = '';\n\n  pk() {\n    return this.id;\n  }\n}\n"))),(0,i.kt)(o.Z,{value:"React",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"export function PresentationsPage() {\n  const presentation = useResource(PresentationList, {});\n  return presentation.map(presentation => (\n    <div key={presentation.pk()}>{presentation.title}</div>\n  ));\n}\n")))),(0,i.kt)("p",null,"Extracting entities from a response is known as ",(0,i.kt)("inlineCode",{parentName:"p"},"normalization"),". Accessing a response reverses\nthe process via ",(0,i.kt)("inlineCode",{parentName:"p"},"denormalization"),"."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Global Referential Equality")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Using entities expands Rest Hooks' global referential equality guarantee beyond the granularity of\nan entire endpoint response."))),(0,i.kt)("h2",{id:"mutations-and-dynamic-data"},"Mutations and Dynamic Data"),(0,i.kt)("p",null,"When an endpoint changes data, this is known as a ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/rpc"},"side effect"),". Marking an endpoint with ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Endpoint#sideeffect"},"sideEffect: true"),"\ntells Rest Hooks that this endpoint is not idempotent, and thus should not be allowed in hooks\nthat may call the endpoint an arbitrary number of times like ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/useresource"},"useResource()")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/useRetrieve"},"useRetrieve()")),(0,i.kt)("p",null,"By including the changed data in the endpoint's response, Rest Hooks is able to able to update\nany entities it extracts by specifying the schema."),(0,i.kt)(s.Z,{defaultValue:"Create",values:[{label:"Create",value:"Create"},{label:"Update",value:"Update"},{label:"Delete",value:"Delete"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"Create",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { schema, Endpoint } from '@rest-hooks/endpoint';\n\nconst todoCreate = new Endpoint(\n  (body: FormData) =>\n    fetch(`https://jsonplaceholder.typicode.com/todos/`, {\n      method: 'POST',\n      body,\n    }).then(res => res.json()),\n  { schema: Todo, sideEffect: true },\n);\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Example Usage")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useController } from 'rest-hooks';\n\nexport default function NewTodoForm() {\n  const { fetch } = useController();\n  return (\n    <Form onSubmit={e => fetch(todoCreate, new FormData(e.target))}>\n      <FormField name=\"title\" />\n    </Form>\n  );\n}\n")))),(0,i.kt)(o.Z,{value:"Update",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { schema, Endpoint } from '@rest-hooks/endpoint';\n\nconst todoUpdate = new Endpoint(\n  ({ id }: { id: number }, body: FormData) =>\n    fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\n      method: 'PUT',\n      body,\n    }).then(res => res.json()),\n  { schema: Todo, sideEffect: true },\n);\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Example Usage")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useController } from 'rest-hooks';\n\nexport default function UpdateTodoForm({ id }: { id: number }) {\n  const todo = useResource(todoDetail, { id });\n  const { fetch } = useController();\n  return (\n    <Form\n      onSubmit={e => fetch(todoUpdate, { id }, new FormData(e.target))}\n      initialValues={todo}\n    >\n      <FormField name=\"title\" />\n    </Form>\n  );\n}\n")))),(0,i.kt)(o.Z,{value:"Delete",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { schema, Endpoint } from '@rest-hooks/endpoint';\n\nconst todoDelete = new Endpoint(\n  ({ id }: { id: number }) =>\n    fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\n      method: 'DELETE',\n    }).then(() => ({ id })),\n  { schema: new schema.Delete(Todo), sideEffect: true },\n);\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Example Usage")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useController } from 'rest-hooks';\nimport ArticleResource from 'resources/article';\n\nexport default function TodoWithDelete({ todo }: { todo: Todo }) {\n  const { fetch } = useController();\n  return (\n    <div>\n      {todo.title}\n      <button onClick={() => del(todoDelete, { id: todo.id })}>Delete</button>\n    </div>\n  );\n}\n"))))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Mutations automatically update the normalized cache, resulting in consistent and fresh data."))),(0,i.kt)("h2",{id:"schema"},"Schema"),(0,i.kt)("p",null,"Schemas are a declarative definition of how to ",(0,i.kt)("a",{parentName:"p",href:"./schema"},"process responses")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./schema"},"where")," to expect ",(0,i.kt)("a",{parentName:"li",href:"/docs/api/Entity"},"Entities")),(0,i.kt)("li",{parentName:"ul"},"Classes to ",(0,i.kt)("a",{parentName:"li",href:"../guides/network-transform#deserializing-fields"},"deserialize fields"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Endpoint } from '@rest-hooks/endpoint';\n\nconst fetchTodoList = (params: any) =>\n  fetch(`https://jsonplaceholder.typicode.com/todos/`).then(res => res.json());\n\nconst todoList = new Endpoint(fetchTodoList, {\n  // highlight-next-line\n  schema: [Todo],\n  sideEffect: true,\n});\n")),(0,i.kt)("p",null,"Placing our ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Entity"},"Entity")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Todo")," in an array, tells Rest Hooks to expect\nan array of ",(0,i.kt)("inlineCode",{parentName:"p"},"Todos"),"."),(0,i.kt)("p",null,"Aside from array, there are a few more 'schemas' provided for various patterns. The first two (Object and Array)\nhave shorthands of using object and array literals."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/Object"},"Object"),": maps with known keys"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/Array"},"Array"),": variably sized arrays"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/Union"},"Union"),": select from many different types"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/Values"},"Values"),": maps with any keys - variably sized"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/Delete"},"Delete"),": remove an entity")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/api/schema"},"Learn more")),(0,i.kt)("h3",{id:"nesting"},"Nesting"),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Entity"},"Entities")," themselves can specify ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/nested-response"},"nested")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/schema"},"schemas"),"\nby specifying a ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Entity#schema"},"static schema")," member."),(0,i.kt)(s.Z,{defaultValue:"Entity",values:[{label:"Entity",value:"Entity"},{label:"Response",value:"Response"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"Entity",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Entity } from '@rest-hooks/endpoint';\n\nclass Todo extends Entity {\n  readonly id: number = 0;\n  readonly user: User = User.fromJS({});\n  readonly title: string = '';\n  readonly completed: boolean = false;\n\n  pk() {\n    return `${this.id}`;\n  }\n\n  // highlight-start\n  static schema = {\n    user: User,\n  };\n  // highlight-end\n}\n\nclass User extends Entity {\n  readonly id: number = 0;\n  readonly username: string = '';\n\n  pk() {\n    return `${this.id}`;\n  }\n}\n"))),(0,i.kt)(o.Z,{value:"Response",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 5,\n  "user": {\n    "id": 10,\n    "username": "bob",\n  },\n  "title": "Write some Entities",\n  "completed": false\n}\n')))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/guides/nested-response"},"Learn more")),(0,i.kt)("h3",{id:"data-representations"},"Data Representations"),(0,i.kt)("p",null,"Additionally, any ",(0,i.kt)("inlineCode",{parentName:"p"},"newable")," class that has a toJSON() method, can be ",(0,i.kt)("a",{parentName:"p",href:"../guides/network-transform#deserializing-fields"},"used as a schema"),". This will simply construct the object during denormalization.\nThis might be useful with representations like ",(0,i.kt)("a",{parentName:"p",href:"https://mikemcl.github.io/bignumber.js/"},"bignumber")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Entity } from '@rest-hooks/endpoint';\n\nclass Todo extends Entity {\n  readonly id: number = 0;\n  readonly user: User = User.fromJS({});\n  readonly title: string = '';\n  readonly completed: boolean = false;\n  // highlight-next-line\n  readonly dueDate: Date = new Date(0);\n\n  pk() {\n    return `${this.id}`;\n  }\n\n  static schema = {\n    user: User,\n    // highlight-next-line\n    dueDate: Date,\n  };\n}\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Due to the global referential equality guarantee - construction of members only occurs once\nper update."))))}c.isMDXComponent=!0}}]);